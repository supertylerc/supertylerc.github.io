<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Oss | Tyler's Technical Retreat]]></title>
  <link href="http://oss-stack.io//blog/categories/oss/atom.xml" rel="self"/>
  <link href="http://oss-stack.io//"/>
  <updated>2014-06-21T23:42:24-07:00</updated>
  <id>http://oss-stack.io//</id>
  <author>
    <name><![CDATA[Tyler Christiansen]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Centralized Logging and Live Monitoring]]></title>
    <link href="http://oss-stack.io//blog/centralized-logging-and-live-monitoring/"/>
    <updated>2014-01-23T20:23:05-08:00</updated>
    <id>http://oss-stack.io//blog/centralized-logging-and-live-monitoring</id>
    <content type="html"><![CDATA[<p>How great would it be to read all of your router logs from one location?
And to be able to watch the messages scroll by in real time?  This post
will show you not only how to send your router logs to a centralized
location, but it will also show you how to organize the logfiles on your
centralized server.  We&rsquo;ll take it one step further by writing a shell
script that finds the latest logfiles and prints them out.</p>

<h2>Junos Configuration</h2>

<p>I suspect that you&rsquo;re pretty familiar with Junos and probably already
know the configuration necessary to send logfiles to a server, but just
in case, here&rsquo;s the necessary configuration:</p>

<p>``` bash
tyler@lab01# show | compare
[edit system]
+   syslog {
+       host 192.168.1.254 {
+           any any;
+           match &ldquo;!(.<em>rancid.</em>)&rdquo;;
+           port 514;
+       }
+   }</p>

<p>{master:0}[edit]
```</p>

<blockquote><p>You can copy from <code>[edit system]</code> to the line above <code>{master:0}[edit]</code>
and paste it into your Junos session if you enter the <code>load patch
terminal</code> command from configuration mode.  Just press <code>^D</code>
(control+D) to tell the system you&rsquo;ve finished loading the patch.</p></blockquote>

<p>The above will send every log message, except for messages contianing
the line &ldquo;<strong>rancid</strong>&rdquo;, to the specified server.  I always exclude
&ldquo;<strong>rancid</strong>&rdquo; from log messages as my RANCID configuration is set to pull
configs from equipment every five minutes.</p>

<!-- more -->


<h2>Server Setup</h2>

<p><code>rsyslog</code> is the tool of choice for this article.  It&rsquo;s worth noting
that you can likely obtain the same effect with other syslog servers,
but you&rsquo;ll need to consult the relevant documentation.</p>

<blockquote><p>In this article, the author assumes the use of Ubuntu (and
specifically uses version 12.04).  Other distributions will work but
may use different commands, particularly for package installation.</p>

<p>In addition, if your company already uses a syslog server, you should
continue to use that particular server instead of trying to run
<code>rsyslog</code> next to it.</p></blockquote>

<h3>Installing and Configuring <small><code>rsyslog</code> to the rescue</small></h3>

<p>To get started, you&rsquo;ll need to install <code>rsyslog</code>.  Do this with the
following command:</p>

<p><code>bash
sudo apt-get install -y rsyslog
</code></p>

<p>Once installed, open <code>/etc/rsyslog.conf</code> with <code>vim</code> and delete whatever
exists and paste the below configuration:</p>

<p><code>bash
$ModLoad imuxsock
$ModLoad imudp
$ModLoad imklog
$UDPServerRun 514
$IncludeConfig /etc/rsyslog.d/*.conf
</code></p>

<blockquote><p>If you don&rsquo;t know how to use <code>vim</code>, I recommend that you read <a href="/blog/linux-crash-course/" title="Crash Course - Linux">my
article on the basics of Linux</a>.</p></blockquote>

<p>The above configuration makes it possible to listen on UDP port
&ldquo;<strong>514</strong>&rdquo;, the port specified in the Junos configuration above, and
includes configuration files in the <code>/etc/rsyslog.d/</code> directory (if it
ends in <code>.conf</code>).  This makes it easier to write configuration files in
a distributed manner.</p>

<p>The next step is to configure a template.  Open up
<code>/etc/rsyslog.d/10-routers.conf</code> and paste the below configuration:</p>

<p><code>bash
$template
DynFile,"/var/log/netops/%HOSTNAME%/%timegenerated:1:10:date-rfc3339%"
$filegroup noc
:source , !isequal , "localhost" ?DynFile
:source , !isequal , "localhost" ~
</code></p>

<blockquote><p>You may have to change <code>localhost</code> to the hostname portion of your
monitoring server&rsquo;s FQDN.  For example, my server&rsquo;s FQDN (as revealed
by the <code>hostname</code> command) is &ldquo;<strong>mon.example.com</strong>&rdquo;.  The hostname
portion of that is &ldquo;<strong>mon</strong>&rdquo;, so I had to change <code>localhost</code> to <code>mon</code>.</p></blockquote>

<p>The above configuration defines a template, <code>DynFile</code>, and essentially
says, &ldquo;If the source of the log message I receive is anything EXCEPT
&rdquo;<strong>localhost</strong>&ldquo;, put a file with the format &rdquo;<strong>YYYY-MM-DD</strong>&ldquo; in a
directory <code>/var/log/netops/%HOSTNAME%/</code>, where %HOSTNAME% is the name of
the message source.  When I create the file, it will have a group of
&rdquo;<strong>noc</strong>&ldquo;.&rdquo;  This results in your logfile being something such as
&ldquo;<strong>/var/log/netops/lab01/2014-01-21</strong>&rdquo; and being readable by members of
the &ldquo;<strong>noc</strong>&rdquo; group.</p>

<blockquote><p>The &ldquo;<strong>noc</strong>&rdquo; group does not exist yet.  Neither does the folder
&ldquo;<strong>/var/log/netops/</strong>&rdquo;.  We&rsquo;re getting to that.</p></blockquote>

<h3>Groups and Folders <small>Final preparations</small></h3>

<p>To get everything up and going, we need to create the &ldquo;<strong>noc</strong>&rdquo; group
and the &ldquo;<strong>/var/log/netops/</strong>&rdquo; folder.  We&rsquo;ll have to add the
appropriate permissions for it as well.  This can all be done relatively
quickly with the following commands:</p>

<p><code>bash
sudo -s
mkdir /var/log/netops
groupadd noc
usermod -a -G noc tyler
chgrp -R noc /var/log/netops
chmod 750 /var/log/netops
exit
</code></p>

<blockquote><p>Don&rsquo;t forget to change &ldquo;<strong>tyler</strong>&rdquo; to your username!</p></blockquote>

<h3>Testing</h3>

<p>After a few minutes, you should be able to see logfiles in your new
directory structure.  See the example output below:</p>

<p>``` bash
tylerc@mon [02:04:30] [~]
&ndash;> % ls -R /var/log/netops
/var/log/netops:
lab01</p>

<p>/var/log/netops/lab01:
2014-01-22</p>

<p>tylerc@mon [02:04:56] [~]
&ndash;> % cat /var/log/netops/lab01/2013-01-22
2014-01-22T00:00:00+00:00 lab01 /usr/sbin/cron[10072]: (root) CMD (newsyslog)
2014-01-22T00:00:00+00:00 lab01 /usr/sbin/cron[10073]: (root) CMD (/usr/libexec/atrun)
2014-01-22T00:00:04+00:00 lab01 sshd[10077]: TAC_AUTHEN_STATUS_GETPASS
2014-01-22T00:00:04+00:00 lab01 sshd[10077]: TAC_AUTHEN_STATUS_PASS
2014-01-22T00:00:04+00:00 lab01 sshd[10077]: Accepted password for jim from 192.168.1.50 port 53460 ssh2
2014-01-22T00:00:05+00:00 lab01 mgd[10081]: UI_AUTH_EVENT: Authenticated user &lsquo;noc&rsquo; at permission level &lsquo;j-ops-ro&rsquo;
```</p>

<h2>Unified Live Log Messages <small><code>multitail</code> and <code>bash</code> are</h2>

<p>superheroes</small></p>

<p>The magic of an excellent utility called <code>multitail</code> will let you read
multiple log files at the same time and split them up into multiple
sub-windows if you so desire.  We&rsquo;ll use a simple bash script to
automagically pull all of the current router/switch/firewall/etc logs
in, aggregates them into a single feed and window, and &ldquo;follows&rdquo; them
(outputs their contents to the screen whenever they&rsquo;re data is written
to them).  We&rsquo;ll also add the ability to filter this information so that
you can get only OSPF events or only BGP events or any combination of
any matched phrase.</p>

<h3>Multitail</h3>

<p>First, grab multitail:</p>

<p><code>bash
sudo apt-get install -y multitail
</code></p>

<p>And test it out:</p>

<p><code>bash
tylerc@mon [02:55:14] [~]
-&gt; % multitail /var/log/netops/lab01/2014-01-22 -I
/var/log/netops/lab02/2014-01-22
2014-01-22T02:31:19+00:00 lab01 xntpd[1223]: NTP Server Unreachable
2014-01-22T02:31:33+00:00 lab01 last message repeated 7 times
2014-01-22T02:31:35+00:00 lab01 xntpd[1223]: NTP Server Unreachable
2014-01-22T02:35:00+00:00 lab01 /usr/sbin/cron[70084]: (root) CMD (/usr/libexec/atrun)
2014-01-22T02:40:00+00:00 lab01 /usr/sbin/cron[70088]: (root) CMD (/usr/libexec/atrun)
2014-01-22T02:45:00+00:00 lab01 /usr/sbin/cron[70093]: (root) CMD (/usr/libexec/atrun)
2014-01-22T02:45:00+00:00 lab01 /usr/sbin/cron[70094]: (root) CMD (newsyslog)
2014-01-22T02:48:36+00:00 lab01 xntpd[1223]: NTP Server Unreachable
2014-01-22T02:48:52+00:00 lab01 last message repeated 8 times
2014-01-22T02:50:00+00:00 lab01 /usr/sbin/cron[70099]: (root) CMD (/usr/libexec/atrun)
2014-01-22T02:55:00+00:00 lab01 /usr/sbin/cron[70103]: (root) CMD (/usr/libexec/atrun)
2014-01-22T02:55:18+00:00 lab01 mgd[11303]: UI_CHILD_STATUS: Cleanup child '/usr/sbin/lrmuxd', PID 11321, status 0
2014-01-22T02:55:18+00:00 lab02 mgd[11303]: UI_CHILD_START: Starting child '/usr/sbin/pgmd'
2014-01-22T02:55:18+00:00 lab02 mgd[11303]: UI_CHILD_STATUS: Cleanup child '/usr/sbin/pgmd', PID 11322, status 0
2014-01-22T02:55:19+00:00 lab02 mgd[11303]: UI_CHILD_START: Starting child '/usr/sbin/sdxd'
2014-01-22T02:55:19+00:00 lab02 mgd[11303]: UI_CHILD_STATUS: Cleanup child '/usr/sbin/sdxd', PID 11323, status 0
2014-01-22T02:55:19+00:00 lab02 mgd[11303]: UI_JUNOSCRIPT_CMD: User 'root' used JUNOScript client to run command 'request-end-session'
</code></p>

<h3>rtail <small>The <code>bash</code> script</small></h3>

<p>Now, let&rsquo;s create a script called <code>rtail</code> (for &ldquo;<strong>r</strong>outer <strong>tail</strong>&rdquo;)
and make it do some magic.  First, create a new text file called <code>rtail</code>
in the <code>/usr/bin/local/</code> directory.</p>

<blockquote><p>For a refresher, the appropriate command would be <code>sudo vim
/usr/bin/local/rtail</code>.  See <a href="/blog/linux-crash-course/" title="Crash Course - Linux">my crash course on the basics of
Linux</a> for more details.</p></blockquote>

<p>Enter the following in the file and save it:</p>

<p>``` bash</p>

<h1>!/bin/bash</h1>

<h1>Name    : rtail</h1>

<h1>Author  : Tyler Christiansen</h1>

<h1>Purpose : View current and future log messages for routers</h1>

<h1>Date    : 2013-12-22</h1>

<h1>Variable declarations</h1>

<p>today=$(date +&ldquo;%Y-%m-%d&rdquo;)
declare -a arg
delim=&ldquo; -I &rdquo;</p>

<h1>Search for files with today&rsquo;s date in the log dir</h1>

<p>for x in $(find /var/log/netops -name <em>$today</em>); do
  # Add the full path to the $arg array
  arg=( &ldquo;${arg[@]}&rdquo; &ldquo;$x&rdquo; )
done</p>

<h1>Implode the array</h1>

<p>arg=$(printf &ldquo;${delim}%s&rdquo; &ldquo;${arg[@]}&rdquo;)
arg=${arg:${#delim}}</p>

<h1>If the user didn&rsquo;t supply a filter&hellip;</h1>

<p>if [ $# -eq 0 ]; then
  # Then call multitail without flags
  multitail $arg
else
  # The user supplied a filter, so call multitail
  #   with the -E flag
  multitail -E $1 $arg
fi
```</p>

<p>Now, edit permissions to make it owned by the &ldquo;<strong>noc</strong>&rdquo; group and lock
down execution and read/write:</p>

<p><code>bash
sudo chgrp noc /usr/local/bin/rtail
sudo chmod 650 /usr/local/bin/rtail
</code></p>

<p>Now you should be able to execute the command.  Supply filters you want
to apply (such as &ldquo;<strong>ospf</strong>&rdquo;) in quotation marks.</p>

<blockquote><p>There is an unfortunate feature missing in <code>multitail</code>: you can&rsquo;t
perform case-insensitive matches from the command invocation.</p>

<p>However, if you start rtail with no filter expressions, you can easily
perform case-insenstive searches by pressing the <code>/</code> key and entering
your text, then selecting the <code>case insensitive</code> option by pressing
the <code>tab</code> key.</p></blockquote>

<p>Here&rsquo;s an example filtering on &ldquo;<strong>cron</strong>&rdquo;:</p>

<p><code>bash
2014-01-22T03:53:00+00:00 lab01 /usr/sbin/cron[96133]: (root) CMD (newsyslog)
2014-01-22T03:50:00+00:00 lab03 /usr/sbin/cron[96593]: (root) CMD (/usr/libexec/atrun)
2014-09-19T06:25:00+00:00 lab07 /usr/sbin/cron[48036]: (root) CMD (/usr/libexec/atrun)
2014-09-26T03:01:00+00:00 lab06 /usr/sbin/cron[98802]: (root) CMD (adjkerntz -a)
2014-09-26T03:40:00+00:00 lab05 /usr/sbin/cron[98767]: (root) CMD (/usr/libexec/atrun)
2014-01-22T03:53:00+00:00 lab02 /usr/sbin/cron[53337]: (root) CMD (newsyslog)
2014-01-22T03:50:00+00:00 lab05 /usr/sbin/cron[39761]: (root) CMD (/usr/libexec/atrun)
2014-09-14T07:50:00+00:00 lab10 /usr/sbin/cron[98647]: (root) CMD (/usr/libexec/atrun)
2014-09-26T03:35:00+00:00 lab08 /usr/sbin/cron[98022]: (root) CMD (/usr/libexec/atrun)
2014-09-14T07:55:00+00:00 lab09 /usr/sbin/cron[98586]: (root) CMD (/usr/libexec/atrun)
2014-01-22T03:50:00+00:00 lab07 /usr/sbin/cron[11694]: (root) CMD (/usr/libexec/atrun)
2014-09-14T05:05:00+00:00 lab02 /usr/sbin/cron[97612]: (root) CMD (/usr/libexec/atrun)
2014-09-14T07:55:00+00:00 lab04 /usr/sbin/cron[98640]: (root) CMD (/usr/libexec/atrun)
2014-01-22T03:54:00+00:00 lab02 /usr/sbin/cron[53340]: (root) CMD (newsyslog)
2014-01-22T03:54:00+00:00 lab01 /usr/sbin/cron[96136]: (root) CMD (newsyslog)
</code></p>

<blockquote><p>The output in reality looks a bit different.  The screenshot below
shows what it would actually look like.  I&rsquo;ve blacked out actual
hostnames (sorry).</p></blockquote>

<p><div class='bogus-wrapper'><notextile><!-- Image -->
<a id="img-2" class="imgModal" href="#imgModal-2" data-toggle="modal">
  <img src="/images/rtail_ex.jpg" width="1407" height="630" title="Click for larger view of rtail example." />
</a>
<div style="float: none;"></div>

<!-- Modal -->
<div class="modal fade" id="imgModal-2" tabindex="-1" role="dialog" aria-labelledby="imgModal-2Label" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
        <h4 class="modal-title">rtail example</h4>
      </div>
      <div class="modal-body">
        <img src="/images/rtail_ex.jpg" width="2814" height="1260" />
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-primary" data-dismiss="modal">Close</button>
      </div>
    </div><!-- /.modal-content -->
  </div><!-- /.modal-dialog -->
</div><!-- /.modal --></notextile></div></p>

<h2>The End</h2>

<p>You should definitely check out the <a href="http://www.vanheusden.com/multitail/" title="multitail">multitail webpage</a> and read up
on it a little more.  The bash script above is licensed under the
<a href="http://opensource.org/licenses/BSD-2-Clause" title="BSD 2-Clause License">FreeBSD 2-Clause License</a>, so feel free to modify&mdash;it has a lot of
room for improvement!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TACACS+ [3/3] - Nexus Configuration]]></title>
    <link href="http://oss-stack.io//blog/tacacs-nexus-configuration/"/>
    <updated>2014-01-21T19:43:00-08:00</updated>
    <id>http://oss-stack.io//blog/tacacs-nexus-configuration</id>
    <content type="html"><![CDATA[<blockquote><p>Note: This is Part 3 in a series of posts on TACACS+ installation and
deployment.</p>

<p>You should read these posts in order if you&rsquo;re not familiar with
TACACS+:</p>

<ul>
<li><a href="/blog/tacacs-introduction-to-aaa/" title="TACACS+ [0/3] - Introduction to AAA">TACACS+ [0/3] &ndash; Introduction to AAA</a></li>
<li><a href="/blog/tacacs-downloading-and-compiling/" title="TACACS+ [1/3] - Downloading and Compiling">TACACS+ [1/3] &ndash; Downloading and Compiling</a></li>
<li><a href="/blog/tacacs-junos-configuration/" title="TACACS+ [2/3] - Junos Configuration">TACACS+ [2/3] &ndash; Junos Configuration</a></li>
</ul>
</blockquote>

<p>In <a href="/blog/tacacs-junos-configuration/" title="TACACS+ [2/3] - Junos Configuration">Part 2</a>, we covered the configuration of a Juniper Networks
device to authenticate against a TACACS+ server.  In this part, we&rsquo;ll
cover the configuration necessary for a Cisco Nexus switch running NXOS.</p>

<h2>TACACS+ Configuration</h2>

<p>Just like in <a href="/blog/tacacs-junos-configuration/" title="TACACS+ [2/3] - Junos Configuration">Part 2</a>, we&rsquo;re going to be starting with the TACACS+
configuration.  Most of the work is already done for us&mdash;we&rsquo;ll be adding
another service the same way we did previously and the configuration
will be complete.</p>

<p>Start by opening the TACACS+ configuration file:</p>

<p><code>bash
cd /opt/oss-conf
vim tac_plus/tac_plus.conf
</code></p>

<p>Next, find the <code>group</code> section for &ldquo;<strong>engineers</strong>&rdquo;.  You&rsquo;ll want to make
the section look like it does below by adding the new <code>service</code> stanza:</p>

<p>``` bash
group = engineers {
  default service = permit
  service = junos-exec {</p>

<pre><code>local-user-name = admin
</code></pre>

<p>  }
  service = exec {</p>

<pre><code>shell:roles="\"network-admin\""
</code></pre>

<p>  }
}
```</p>

<blockquote><p>Remember: press <code>i</code> to enter insert mode, the <code>[escape]</code> key to exit
insert mode, and <code>:wq</code> to save and close the file.</p></blockquote>

<!-- more -->


<p>Next, we&rsquo;ll add and commit the changes to our configuration repository:</p>

<p><code>bash
git add tac_plus/tac_plus.conf
git commit -m 'add nxos permissions for engineers'
</code></p>

<blockquote><p>Remember that we&rsquo;re adding commits for each minor thing we do (that
adds complete functionality for a given need).  This is generally
considered a best practice.</p></blockquote>

<p>Next, let&rsquo;s set the <code>noc</code> group to have read-only access:</p>

<p><code>bash
vim tac_plus/tac_plus.conf
</code></p>

<p>Add the necessary lines below to match your configuration to this
example:</p>

<p>``` bash
group = noc {
  default service = permit
  service = junos-exec {</p>

<pre><code>local-user-name = noc
</code></pre>

<p>  }
  service = exec {</p>

<pre><code>shell:roles="\"network-operator\""
</code></pre>

<p>  }
}
```</p>

<p>And add and commit the changes:</p>

<p><code>bash
git add tac_plus/tac_plus.conf
git commit -m 'add nxos permissions for noc techs'
</code></p>

<h2>Configuring NXOS</h2>

<p>The NXOS configuration is shown below. Note that you&rsquo;ll need to replace
IP addresses with your own relevant values.</p>

<p>``` bash
lab03(config)# sh run tacacs+</p>

<p>!Command: show running-config tacacs+
!Time: Sat Jan 18 22:51:01 2014</p>

<p>version 5.2(1)N1(3)
feature tacacs+</p>

<p>ip tacacs source-interface mgmt0
tacacs-server host 192.168.1.254 key 7 &ldquo;!e-q0v3_l4M4s5#&rdquo;
aaa group server tacacs+ lab</p>

<pre><code>server 192.168.1.254
use-vrf management
</code></pre>

<p>lab03(config)#
```</p>

<blockquote><p>Start under the <code>version 5.2(1)N1(3)</code> line.  Since we&rsquo;re using
preexisting groups, you don&rsquo;t need to create them like we did with
Junos.</p></blockquote>

<h2>Restart TACACS+</h2>

<p><code>bash
sudo stop tac_plus
sudo start tac_plus
</code></p>

<h3>Test the NOC Tech <small>His name is Jim</small></h3>

<p><code>bash
ssh jim@192.168.1.3
</code></p>

<p>You should be able to run commands such as <code>show run</code>, <code>ping</code>, and
<code>traceroute</code>.</p>

<p>``` bash
lab03# show vlan summary</p>

<p>Number of existing VLANs           : 20
Number of existing user VLANs      : 20
Number of existing extended VLANs  : 0</p>

<p>lab03# show running-config tacacs+</p>

<p>!Command: show running-config tacacs+
!Time: Sat Jan 18 23:45:22 2014</p>

<p>version 5.2(1)N1(3)
feature tacacs+</p>

<p>ip tacacs source-interface mgmt0
tacacs-server host 192.168.1.254 key 7 &ldquo;!e-q0v3_l4M4s5#&rdquo;
aaa group server tacacs+ lab</p>

<pre><code>server 192.168.1.254
use-vrf management
</code></pre>

<p>lab03# ping 192.168.1.1 vrf management
PING 192.168.1.1 (192.168.1.1): 56 data bytes
64 bytes from 192.168.1.1: icmp_seq=0 ttl=63 time=1.494 ms
64 bytes from 192.168.1.1: icmp_seq=1 ttl=63 time=2.047 ms
64 bytes from 192.168.1.1: icmp_seq=2 ttl=63 time=1.099 ms
64 bytes from 192.168.1.1: icmp_seq=3 ttl=63 time=1.29 ms
64 bytes from 192.168.1.1: icmp_seq=4 ttl=63 time=1.1 ms</p>

<p>&mdash;&ndash; 192.168.1.1 ping statistics &mdash;&ndash;
5 packets transmitted, 5 packets received, 0.00% packet loss
round-trip min/avg/max = 1.099/1.405/2.047 ms
lab03# traceroute 192.168.1.1 vrf management
traceroute to 192.168.1.1 (192.168.1.1), 30 hops max, 40 byte packets
 1  192.168.1.1 (192.168.1.1)  1.567 ms  1.713 ms  1.323 ms
lab03#
```</p>

<h2>Fine-grained Control</h2>

<p>Nexus switches don&rsquo;t seem to allow fine-grained control of which
commands can be executed, unlike Junos and IOS.  That or I haven&rsquo;t found
the special sauce yet.</p>

<h2>The End <small>Finally!</small></h2>

<p>This post concludes the three-part series on TACACS+, but don&rsquo;t worry!
There will be more posts exploring other features and additional vendor
integration.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TACACS+ [2/3] - Junos Configuration]]></title>
    <link href="http://oss-stack.io//blog/tacacs-junos-configuration/"/>
    <updated>2014-01-20T19:33:09-08:00</updated>
    <id>http://oss-stack.io//blog/tacacs-junos-configuration</id>
    <content type="html"><![CDATA[<blockquote><p>Note: This is Part 2 in a series of posts on TACACS+ installation and
deployment.</p>

<p>You should start with <a href="/blog/tacacs-introduction-to-aaa/" title="TACACS+ [0/3] - Introduction to AAA">the special precursor</a>, followed by <a href="/blog/tacacs-downloading-and-compiling/" title="TACACS+ [1/3] - Downloading and Compiling">Part 1:
Downloading and Compiling</a>.</p></blockquote>

<p>One of major vendors that supports TACACS+ is Juniper Networks.
Enabling TACACS+ for a Juniper Networks device is simple.  It&rsquo;s made
even easier by the fact that the configuration is the same across their
major routing, switching, and security platforms.</p>

<blockquote><p>Note: Some platforms, such as the MAG series (which runs IVE), do not
support TACACS+ authentication.</p></blockquote>

<h2>TACACS+ Configuration</h2>

<p>We&rsquo;ll start with the TACACS+ configuration.  We already have the base
configuration from <a href="/blog/tacacs-introduction-to-aaa/" title="TACACS+ [0/3] - Introduction to AAA">part 1</a>.  We&rsquo;re only going to be modifying the
sections of the configuration labeled as <code>group</code>.  This is for
scalability reasons&mdash;as your users grow, you can simply add new users to
the appropriate group instead of redefining their permissions for every
user.</p>

<p>Let&rsquo;s start with the <code>engineers</code> group.  We&rsquo;re going to add a simple
section to the group that will grant members the same permissions as a
local Junos user called &ldquo;<strong>admin</strong>&rdquo;.</p>

<!-- more -->


<p>Start by opening the file:</p>

<p><code>bash
cd /opt/oss-conf
vim tac_plus/tac_plus.conf
</code></p>

<p>Now, insert the lines below.</p>

<p>``` bash
group = engineers {
  default service = permit
  service = junos-exec {</p>

<pre><code>local-user-name = admin
</code></pre>

<p>  }
}
```</p>

<blockquote><p>Remember: press <code>i</code> to enter insert mode, the <code>[escape]</code> key to exit
insert mode, and <code>:wq</code> to save and close the file.</p></blockquote>

<p>Next we&rsquo;ll add and commit the changes to our fancy configuration
revision repository:</p>

<p><code>bash
git add tac_plus/tac_plus.conf
git commit -m 'add junos permissions for engineers'
</code></p>

<p>Now, let&rsquo;s fix up the <code>noc</code> group, which will map to a local Junos user
claled &ldquo;<strong>noc</strong>&rdquo;.  Once again, open the file:</p>

<p><code>bash
vim tac_plus/tac_plus.conf
</code></p>

<p>Add the following lines:</p>

<p>``` bash
 group = noc {
  default service = permit
  service = junos-exec {</p>

<pre><code>local-user-name = noc
</code></pre>

<p>  }
 }
```</p>

<p>And add the changes and commit them in git:</p>

<p><code>bash
git add tac_plus/tac_plus.conf
git commit -m 'add junos permissions for engineers'
</code></p>

<blockquote><p>You could have just done this all together, but when you work with
revision control, you generally want to break changes up into the
smallest logical blocks possible.  This makes rolling back changes
much easier and less invasive.</p></blockquote>

<p>That&rsquo;s all there is to it for the TACACS+ configuration!  We&rsquo;ll cirlce
back later to show ways to allow specific commands later&mdash;after we show
the Junos configuration</p>

<h2>Configuring Junos</h2>

<p>The Junos configuration is shown below.  Note that you&rsquo;ll need to
replace IP addresses with your own relevant values.</p>

<p>``` bash
root@lab01# show | compare
[edit system]
+  authentication-order [ tacplus password ];
+  tacplus-server {
+      192.168.1.254 {
+          port 49;
+          secret &ldquo;$9$J0GUjTQntuO.P0BRhvMJGUHTF9A0RcyKMZUHkTQSrlMWL&rdquo;; ## SECRET-DATA
+          single-connection;
+          source-address 192.168.1.1;
+      }
+  }
+  accounting {
+      events [ login interactive-commands ];
+      destination {
+          tacplus;
+      }
+  }
+  login {
+      class admin {
+          login-alarms;
+          permissions all;
+      }
+      class noc {
+          permissions [ view view-configuration ];
+      }
+      user engineers {
+          full-name &ldquo;TACACS+ &ndash; Engineers&rdquo;;
+          class admin;
+          authentication {
+              encrypted-password &ldquo;$1$2FA/QHsx$Os2dyH/PdLiD9t96flygS/&rdquo;; ## SECRET-DATA
+          }
+      }
+      user noc {
+          full-name &ldquo;TACACS+ &ndash; NOC Techs&rdquo;;
+          class noc;
+          authentication {
+              encrypted-password &ldquo;$1$4wt52bTA$niTEoQJBfp3maQkVTvCI60&rdquo;; ## SECRET-DATA
+          }
+      }
+  }</p>

<p>{master:0}[edit]
```</p>

<blockquote><p>The configuration above is in patch form.  You can load it by copying
everything form <code>[edit system]</code> to the last line with a <code>+</code>, then
entering configuration mode in your Juniper device, and typing <code>load
patch terminal</code>, then pasting the patch and pressing <code>^D</code> (control+D).</p></blockquote>

<h2>Restart TACACS+</h2>

<p>The next step is to restart TACACS+ if it&rsquo;s running.  Check to see if
it&rsquo;s running:</p>

<p><code>bash
sudo status tac_plus
</code></p>

<p>If it&rsquo;s not running:</p>

<p><code>bash
sudo start tac_plus
</code></p>

<p>If it is running:</p>

<p><code>bash
sudo stop tac_plus
sudo start tac_plus
</code></p>

<p>Now, test your new configuration:</p>

<p><code>bash
ssh jim@192.168.1.1
</code></p>

<p>Junos should show you logged in as the user &ldquo;<strong>jim</strong>&rdquo;.  You should be
able to use show commands, but not change configuration.</p>

<p>``` bash
jim@lab02> show vlans summary</p>

<p>VLANs summary:</p>

<pre><code>Total: 27,  Configured VLANs: 26
Internal VLANs: 1,  Temporary VLANs: 0
</code></pre>

<p>Dot1q VLANs summary:</p>

<pre><code>Total: 27, Tagged VLANs: 26, Untagged VLANs: 1
</code></pre>

<p>{master:0}
jim@lab02> show configuration routing-options
static {</p>

<pre><code>route 0.0.0.0/0 next-hop 192.168.1.1;
</code></pre>

<p>}</p>

<p>{master:0}
jim@lab02> ping</p>

<pre><code>       ^
</code></pre>

<p>unknown command.
jim@lab02>
```</p>

<h2>Extending Permissions</h2>

<p>You&rsquo;ll probably notice that although the &ldquo;<strong>jim</strong>&rdquo; user can run some
show commands and view the configuration, he can&rsquo;t use commands such as
<code>ping</code> and <code>traceroute</code>.  Let&rsquo;s fix that now.  Let&rsquo;s also prevent
members of the &ldquo;<strong>noc</strong>&rdquo; group from viewing the configuration under the
<code>system</code> hierarchy.</p>

<p>To start, let&rsquo;s follow the same steps we&rsquo;ve been following.  Don&rsquo;t
forget to see the note above for a refresher on <code>vim</code> if necessary!</p>

<p><code>bash
cd /opt/oss-conf
vim tac_plus/tac_plus.conf
</code></p>

<p>Now, find the &ldquo;<strong>noc</strong>&rdquo; group and make it look like this:</p>

<p>``` bash
group = noc {
  default service = permit
  service = junos-exec {</p>

<pre><code>local-user-name = noc
allow-commands1="ping.*"
allow-commands2="traceroute.*"
deny-configuration1="system.*"
</code></pre>

<p>  }
}
```</p>

<p>Add and commit to your repository:</p>

<p><code>bash
git add tac_plus/tac_plus.conf
git commit -m 'fix command auth for noc group'
</code></p>

<p>And restart tac_plus:</p>

<p><code>bash
sudo stop tac_plus
sudo start tac_plus
</code></p>

<h3>The results</h3>

<p>``` bash
 jim@lab01> ping 192.168.1.1 rapid
 PING 192.168.1.1 (192.168.1.1): 56 data bytes
 !!!!!
 &mdash;&ndash; 192.168.1.1 ping statistics &mdash;&ndash;
 5 packets transmitted, 5 packets received, 0% packet loss
round-trip min/avg/max/stddev = 0.305/1.768/4.718/1.598 ms</p>

<p>{master:0}
jim@lab02> traceroute 192.168.1.1
traceroute to 192.168.1.1 (192.168.1.1), 30 hops max, 40 byte packets
 1  192.168.2.1 (192.168.2.1)  91.231 ms  90.658 ms  95.165 ms
 2  192.168.1.1 (192.168.1.1)  95.484 ms  94.621 ms  103.436 ms</p>

<p>{master:0}
jim@lab02> show configuration system</p>

<pre><code>                                 ^
</code></pre>

<p>permission denied.</p>

<p>{master:0}
jim@lab02> show cli authorization
Current user: &lsquo;noc&rsquo; login: &lsquo;rancid&rsquo; class &lsquo;noc&rsquo;
Permissions:</p>

<pre><code>view        -- Can view current values and statistics
view-configuration-- Can view all configuration (not including secrets)
</code></pre>

<p>Individual command authorization:</p>

<pre><code>Allow regular expression: (ping.*|traceroute.*)
Deny regular expression: none
Allow configuration regular expression: none
Deny configuration regular expression: (system.*)
</code></pre>

<p>{master:0}
jim@lab02>
```</p>

<h2>The End <small>For now&hellip;</small></h2>

<p>Once again, we&rsquo;ve reached the end of another part of the TACACS+ series.
The final piece will focus on doing everything we did here, but for
Cisco&rsquo;s NXOS platform.  But don&rsquo;t worry!  There will be additional,
supplemental posts in the future to show off other features.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TACACS+ [1/3] - Downloading and Compiling]]></title>
    <link href="http://oss-stack.io//blog/tacacs-downloading-and-compiling/"/>
    <updated>2014-01-19T11:05:17-08:00</updated>
    <id>http://oss-stack.io//blog/tacacs-downloading-and-compiling</id>
    <content type="html"><![CDATA[<blockquote><p>Note: This is Part 1 in a series of posts on TACACS+ installation and
deployment.</p>

<p>There is a special precursor post <a href="/blog/tacacs-introduction-to-aaa/" title="TACACS+ [0/3] - Introduction to AAA">here</a> that you can read if you
don&rsquo;t have experience with TACACS+.</p>

<p><a href="/blog/tacacs-junos-configuration/" title="TACACS+ [2/3] - Junos Configuration">Part 2</a> is available <a href="/blog/tacacs-junos-configuration/" title="TACACS+ [2/3] - Junos Configuration">here</a>.</p></blockquote>

<p>This post is all about installing TACACS+.  For this guide, we&rsquo;re going
to use <a href="http://www.shrubbery.net/tac_plus/" title="Shrubbery Networks' TACACS+ Daemon">Shrubbery Networks' excellent TACACS+ daemon</a>.  We&rsquo;re also
going to start laying the foundations for a centralized configuration
control system using <code>git</code>.  Finally, we&rsquo;ll write a few scripts to wrap
the daemon up nice and tight to make it a bit easier to manage.</p>

<h2>Installing the Daemon</h2>

<p>There may or may not be a package available for the Shrubbery TACACS+
daemon, but for a variety of reasons, it&rsquo;s best to build the most recent
version from source.  This will ensure you get the best new features and
bug fixes.  Plus, building the package is pretty easy.</p>

<blockquote><p>Note: This post&rsquo;s examples are all from Ubuntu 12.04, but the concepts
apply to any Linux distribution or BSD derivative.</p></blockquote>

<h3>Prerequisites</h3>

<p>You&rsquo;ll need a few things to get going.  Here&rsquo;s a list:</p>

<ul>
<li>Root on the target Linux or BSD system</li>
<li>Essential compilation tools</li>
<li><code>tcp_wrappers</code> library</li>
</ul>


<p>Here&rsquo;s a quick line to get everything you need from an Ubuntu 12.04
system for which you have the ability to run all commands under <code>sudo</code>:</p>

<p><code>bash
sudo apt-get update
sudo apt-get upgrade -y
sudo apt-get install -y vim curl build-essential flex bison tcpd
libwrap0-dev git
</code></p>

<!-- more -->


<h3>Get the Source!</h3>

<p>Getting the source code for the Shrubbery Networks distribution of
TACACS+ is pretty simple.</p>

<p><code>bash
cd /usr/src
sudo curl -O
ftp://ftp.shrubbery.net/pub/tac_plus/tacacs+-F4.0.4.27a.tar.gz
sudo tar xzf tacacs+-F4.0.4.27a.tar.gz
rm tacacs+-F4.0.4.27a.tar.gz
sudo chown -R $(whoami) tacacs+-F4.0.4.27a
cd tacacs+-F4.0.4.27a
</code></p>

<blockquote><p>Note: As of this post (17 January 2014), F4.0.4.27a is the most recent
version of the Shrubbery Networks TACACS+ daemon.  You&rsquo;ll probably
want to <a href="ftp://ftp.shrubbery.net/pub/tac_plus" title="Shrubbery Networks TACACS+ Daemon FTP">look here</a> to ensure you&rsquo;re getting the most recent
version.</p></blockquote>

<h3>If You Build It&hellip;</h3>

<p>The next part is cake.  We&rsquo;ll create the directory where the daemon will
live, configure the environment, compile the source, and install the
final result.  We&rsquo;ll create the configuration directory, too, but hold
off on populating it for now.</p>

<p><code>bash
sudo mkdir -p /opt/tac_plus
./configure --prefix=/opt/tac_plus
make
sudo make install
sudo mkdir -p /opt/tac_plus/etc
</code></p>

<blockquote><p>Note: you shouldn&rsquo;t encounter any errors, but if you do and need a
hand, feel free to
<a href="mailto:tyler@oss-stack.io?Subject=TACACS%20Installation%20Issues">
e-mail me: tyler (at) oss-stack [dot] io.</a></p></blockquote>

<h3>Wrap It Up</h3>

<p>Next, open up <code>/etc/init/tac_plus.conf</code> with <code>vim</code>:</p>

<p><code>bash
vim /etc/init/tac_plus.conf
</code></p>

<p>Now enter the below into the file.</p>

<p>``` bash</p>

<h1>TACACS+ Upstart Job</h1>

<p>description &ldquo;Shrubbery Networks tac_plus Daemon&rdquo;
author &ldquo;Tyler Christiansen <a href="&#109;&#x61;&#105;&#108;&#116;&#111;&#x3a;&#x74;&#x79;&#x6c;&#x65;&#114;&#64;&#111;&#x73;&#x73;&#45;&#115;&#x74;&#x61;&#99;&#107;&#x2e;&#x69;&#x6f;">&#x74;&#121;&#x6c;&#x65;&#x72;&#x40;&#x6f;&#115;&#x73;&#x2d;&#x73;&#x74;&#x61;&#99;&#x6b;&#46;&#x69;&#x6f;</a>&rdquo;</p>

<p>start on startup
stop on shutdown
respawn
expect daemon
exec /opt/tac_plus/bin/tac_plus -C /opt/tac_plus/etc/tac_plus.conf
```</p>

<blockquote><p>Note: if you&rsquo;re not familiar with <code>vim</code>, just press <code>i</code> to enter
<em>insert</em> mode, paste the above contents, press the <code>[escape]</code> key, and
type <code>:wq</code>.</p></blockquote>

<p>So what does the above script do?  Well, when your system starts, the
<code>tac_plus</code> daemon starts.  When you shut your system down, <code>tac_plus</code>
stops.  The service will restart automatically if it crashes, and
upstart should expect the service to daemonize itself.  This line
(<code>expect daemon</code>) is really the key to the <code>upstart</code> script working
properly: without it, <code>upstart</code> will lose track of the process, and you
won&rsquo;t be able to get status of the daemon, stop it, restart it, or
automatically restart when it crashes.</p>

<h3>State of the Daemon <small>Take a break!</small></h3>

<p>So far, we&rsquo;ve installed the Shrubbery Networks <code>tac_plus</code> daemon in a
custom directory and written an <code>upstart</code> script to control it.  Doesn&rsquo;t
sound like much, does it?  Take a quick break&mdash;basic configuration is
next!</p>

<h2>Configuration</h2>

<p>We&rsquo;re going to do something a bit different here.  This is in
preparation for a centralized configuration repository that tracks
changes.  This is why you needed to install <code>git</code> earlier, even though
it isn&rsquo;t required by <code>tac_plus</code>.  We&rsquo;re going to create a new directory
structure under <code>/opt</code>, initialize a <code>git</code> repository, and create the
initial configuration file that we&rsquo;ll build on in the next two posts.</p>

<p><code>bash
sudo mkdir -p /opt/oss-conf/tac_plus
sudo chown -R $(whoami) /opt/oss-conf
cd /opt/oss-conf
git init
vim tac_plus/tac_plus.conf
</code></p>

<p>Recall the <code>vim</code> crash-course above and enter the below contents into
your <code>tac_plus.conf</code> file:</p>

<blockquote><p>Note: Don&rsquo;t worry too much about what the below information actually
means&mdash;we&rsquo;ll cover it as we go through the next two posts.</p></blockquote>

<p><code>bash
key = "!i-l0v3_t4C4c5#"
accounting file = /var/log/tac_plus
group = engineers {
  default service = permit
}
group = noc {
  default service = permit
}
 user = tyler {
  member = engineers
  login = des $6$nKlz6YCf5d$5jYg3kSMcIpnUP74XOreUiTDlgyFFxP5BivOH4uRl5pc8idyToRtJoe7b.D.CnhGR//R8jmkkW2N4/u9L3l7M1
  enable = des des $6$nKlz6YCf5d$5jYg3kSMcIpnUP74XOreUiTDlgyFFxP5BivOH4uRl5pc8idyToRtJoe7b.D.CnhGR//R8jmkkW2N4/u9L3l7M1
}
user = jim {
  member = noc
  login = des $6$QKH4BA/kj$t/ZI5pXRzRfH0WK/EBye5eZG4twusPTjQPCgF/ZvXD/nfP2f5LqlnY1oVIB1AItoElsSN6quKuf3mrCCkgm7p.
  enable = des $6$QKH4BA/kj$t/ZI5pXRzRfH0WK/EBye5eZG4twusPTjQPCgF/ZvXD/nfP2f5LqlnY1oVIB1AItoElsSN6quKuf3mrCCkgm7p.
}
</code></p>

<blockquote><p>Note: the password for the user <code>tyler</code> is <code>harbl</code>, and the password
for the user <code>jim</code> is <code>blah</code>.</p>

<p>Also note that these passwords are encrypted.  They should <em>always</em>
have <code>des</code> before the hash, and the hash should <em>always</em> indicate the
hash type.  In this case, it is <code>SHA-512</code>.</p>

<p>To generate a hashed password, use the <code>mkpasswd --method=sha-512</code>
command.  Note that your own internal policies may require to use a
different hashing method.</p></blockquote>

<p>Now add the configuration file to the repository and commit it.</p>

<p><code>bash
git add tac_plus/tac_plus.conf
git commit -m 'add initial tac_plus configuration'
</code></p>

<p>Finally, link this to the file your <code>upstart</code> script expects:</p>

<p><code>bash
sudo ln -s /opt/oss-conf/tac_plus/tac_plus.conf
/opt/tac_plus/etc/tac_plus.conf
</code></p>

<h2>The End <small>For now&hellip;</small></h2>

<p>A lot of stuff happened.  Downloading, building, installing,
configuring, revision control, upstart job creation, mini crash
courses&hellip;whew!</p>

<p>Some of the items that were briefly covered will have their own posts
(<code>git</code> and Linux basics especially) while others will be expanded upon
later in the TACACS+ series.</p>

<blockquote><p><a href="/blog/tacacs-junos-configuration/" title="TACACS+ [2/3] - Junos Configuration">Part 2</a> is now available <a href="/blog/tacacs-junos-configuration/" title="TACACS+ [2/3] - Junos Configuration">here</a>.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TACACS+ [0/3] - Introduction to AAA]]></title>
    <link href="http://oss-stack.io//blog/tacacs-introduction-to-aaa/"/>
    <updated>2014-01-18T10:58:54-08:00</updated>
    <id>http://oss-stack.io//blog/tacacs-introduction-to-aaa</id>
    <content type="html"><![CDATA[<blockquote><p>Note: this is a special precursor to a series of posts related to AAA
(authentication, authorization, and accounting) in general and TACACS+
specifically.</p></blockquote>

<p>These days, it seems that everyone is using a centralized authentication
mechanism.  There are certainly a lot of ways to do it, too&mdash;scripts
that push SSH keys to every device, tried-and-true services like RADIUS
and TACACS+, or just throwing any possible form of auditing out the door
and handing everyone the same generic credentials.  Let&rsquo;s just pretend
that the last one in that list doesn&rsquo;t happen in the real world.</p>

<h2>AAA <small>Authentication, Authorization, Accounting</small></h2>

<p>AAA is all about one thing: accountability.  You can argue the
&ldquo;authentication&rdquo; and &ldquo;authorization&rdquo; parts, but lets face it: those
exist only to hold technicians and engineers accountable for what they
do.</p>

<h3>Why You Want It</h3>

<p>If you&rsquo;re not using a AAA solution already, you&rsquo;re probably Doing It
Wrong&trade;.  If you have 5 devices and one person accessing those
devices, you can get away with skipping out on AAA.  If your environment
is any more complex, you should seriously consider a AAA solution.</p>

<p>AAA solutions allow you to centralize authentication and authorization,
as well as log accounting information (such as who entered which
commands on which devices at what times).  This is a powerful
combination&mdash;being able to quickly determine who caused an outage can
greatly reduce the time it takes to determine a reason for an outage,
and it has the added benefit of having concrete proof when you coach
your employees on their actions.</p>

<!-- more -->


<h3>RADIUS <small>VS</small> TACACS+</h3>

<p>There&rsquo;s a pretty good argument between some people on the merits of
RADIUS versus TACACS+.  The biggest case for RADIUS that I&rsquo;ve seen is
that it&rsquo;s been around longer and has more integration with various other
services.  For example, Apache has easy-to-use RADIUS modules for
authentication, but the TACACS+ module that&rsquo;s out there is poorly
documented and may not even work depending on your version of Apache.</p>

<p>Why is this even important?  Well, remember that this is called the &ldquo;OSS
Stack,&rdquo; and the whole idea is to consolidate and integrate systems as
much as possible.  This means that applications such as Cacti that can
take advantage of Apache&rsquo;s authentication mechanisms can be tied into
your RADIUS deployment.  This is moderately defeated by the fact that
permissions must be configured in Cacti, which sort of duplicates effort
and work required, but it has its merits.</p>

<p>TACACS+, on the other hand, gives you extreme flexibility.  I define a
set of roles on a device, then configure TACACS+ to bind a user to those
roles.  TACACS+ can be further integrated with Active Directory,
OpenLDAP, <code>/etc/passwd</code>, MySQL, or a plain text file.  RADIUS can do
this as well, but it&rsquo;s much more difficult and involved.</p>

<p>Need more reason to go with TACACS+ instead of RADIUS?  Here&rsquo;s a few
quick ones:</p>

<ul>
<li>RADIUS uses UDP; TACACS+ uses TCP</li>
<li>Because of the use of TCP, TACACS+:

<ul>
<li>Scales higher</li>
<li>Handles congestion better</li>
<li>Handles latency better</li>
</ul>
</li>
<li>RADIUS encrypts the header, but leaves all other packet contents
unencrypted</li>
<li>TACACS+ encrypts the entire packet, leaving a common header
unencrypted to indicate if the packet is encrypted or not</li>
<li>TACACS+ was designed to separate the components of AAA

<ul>
<li>This makes using certain components alone or in conjunction with
other services easier than with RADIUS</li>
</ul>
</li>
<li>TACACS+ can control which commands a user can utilize in addition to
that user&rsquo;s role

<ul>
<li>RADIUS cannot do this</li>
</ul>
</li>
</ul>


<p>For the above reasons, we&rsquo;re going to be going with TACACS+.  Most
articles at The OSS Stack will stick with TACACS+, although RADIUS will
be explored in certain posts as it is necessary for certain
infrastructure (notably 802.1x).</p>

<h3>Integrating with Authentication Infrastructure</h3>

<p>One of the great things you can do with TACACS+ is integrate it with
your existing authentication infrastructure.  This means if you already
have Active Directory or OpenLDAP deployments, you can configure TACACS+
to pass the authentication off to those services.</p>

<p>We will <strong>NOT</strong> be doing that in this series.  This type of
integration, while good and highly sought after, introduces a terrible
point of failure.  Equipment lockout has been observed under certain
conditions where the TACACS+ server is available, but the backend AD or
LDAP server is not.  This causes a router or switch to reach the TACACS+
server but fail to authenticate (because the backend Active Directory,
OpenLDAP, or RSA server is down), resulting in all users being unable to
log into the device.</p>

<p>However, as this is a common desire amongst administrators, it will be
covered in a future supplemental article with a very large and in-depth
disclaimer.</p>

<h2>Other Options</h2>

<p>There are, of course, other options.  Routers, switches, and firewalls
from Juniper Networks can be configured to log all commands to a
separate logfile, and an engineer can write a script that copies SSH
keys to devices that support key-based authentication.  There are a few
problems with this, namely that not all devices support key-based
authentication.  There is also a problem when logging in from a laptop
or iPad that does not have its public key loaded on the network device.
It&rsquo;s also an administrative nightmare when users need to be removed on
all devices.</p>

<p>For this reason, these types of &ldquo;centralized&rdquo; authentication and/or
logging will not be explored here at OSS Stack.</p>
]]></content>
  </entry>
  
</feed>
